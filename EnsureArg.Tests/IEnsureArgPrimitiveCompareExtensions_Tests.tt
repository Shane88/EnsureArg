<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace EnsureArg.Tests
{
   using System;
   using EnsureArg;
   using FluentAssertions;
   using Microsoft.VisualStudio.TestTools.UnitTesting;

   [TestClass]
   public class IComparablePrimitiveExtensions_Tests
   {  
<# 
      var typeNames = new Dictionary<Type, Tuple<string, bool>>()
      {
          { typeof(byte),    Tuple.Create("byte", true) },
          { typeof(sbyte),   Tuple.Create("sbyte", false) },
          { typeof(short),   Tuple.Create("short", true) },
          { typeof(ushort),  Tuple.Create("ushort", false) },
          { typeof(int),     Tuple.Create("int", true) },
          { typeof(uint),    Tuple.Create("uint", false) },
          { typeof(long),    Tuple.Create("long", true) },
          { typeof(ulong),   Tuple.Create("ulong", false) },
          { typeof(float),   Tuple.Create("float", true) },
          { typeof(double),  Tuple.Create("double", true) },
          { typeof(decimal), Tuple.Create("decimal", true) },
          { typeof(object),  Tuple.Create("object", true) },
          { typeof(bool),    Tuple.Create("bool", true) },
          { typeof(char),    Tuple.Create("char", true) },
          { typeof(string),  Tuple.Create("string", true) },
          { typeof(void),    Tuple.Create("void", true) },
          { typeof(DateTime), Tuple.Create("DateTime", true)}
      };

      Type[] types = new Type[] 
      {
         typeof(byte),
         typeof(sbyte),
         typeof(short),
         typeof(ushort),
         typeof(int),
         typeof(uint),
         typeof(long),
         typeof(ulong),
         typeof(float),
         typeof(double),
         typeof(decimal),
         typeof(DateTime)
      };

#>
      private static T GetValue<T>(int value)
      {
         object newVal = null;
   
         if (typeof(T) == typeof(DateTime))
         {
            newVal = new DateTime(value);
         }
         else 
         {
            newVal = Convert.ChangeType(value, typeof(T));
         }
   
         return (T)newVal;
      }

<#

      foreach (Type type in types)
      {
         Tuple<string, bool> typeDetails;
         string typeName = type.Name;
         bool clsCompliant = true;
         if (typeNames.TryGetValue(type, out typeDetails))
         {
            typeName = typeDetails.Item1;
            clsCompliant = typeDetails.Item2;
         }
#>
      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsLessThan_is_called_with_a_larger_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsLessThan(GetValue<<#= typeName #>>(5));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsLessThan_is_called_with_a_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsLessThan(GetValue<<#= typeName #>>(15));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsLessThan_is_called_with_a_same_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsLessThan(GetValue<<#= typeName #>>(10));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsLessThanOrEqualTo_is_called_with_a_larger_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsLessThanOrEqualTo(GetValue<<#= typeName #>>(5));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsLessThanOrEqualTo_is_called_with_a_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsLessThanOrEqualTo(GetValue<<#= typeName #>>(15));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsLessThanOrEqualTo_is_called_with_a_same_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsLessThanOrEqualTo(GetValue<<#= typeName #>>(10));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsGreaterThan_is_called_with_a_larger_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsGreaterThan(GetValue<<#= typeName #>>(5));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsGreaterThan_is_called_with_a_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsGreaterThan(GetValue<<#= typeName #>>(15));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsGreaterThan_is_called_with_a_same_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsGreaterThan(GetValue<<#= typeName #>>(10));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsGreaterThanOrEqualTo_is_called_with_a_larger_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsGreaterThanOrEqualTo(GetValue<<#= typeName #>>(5));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsGreaterThanOrEqualTo_is_called_with_a_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsGreaterThanOrEqualTo(GetValue<<#= typeName #>>(15));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsGreaterThanOrEqualTo_is_called_with_a_same_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsGreaterThanOrEqualTo(GetValue<<#= typeName #>>(10));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetween_is_called_with_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetween(GetValue<<#= typeName #>>(20), GetValue<<#= typeName #>>(30));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetween_is_called_with_in_between_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetween(GetValue<<#= typeName #>>(5), GetValue<<#= typeName #>>(20));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetween_is_called_with_higher_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetween(GetValue<<#= typeName #>>(1), GetValue<<#= typeName #>>(9));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetween_is_called_with_min_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetween(GetValue<<#= typeName #>>(10), GetValue<<#= typeName #>>(20));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetween_is_called_with_max_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetween(GetValue<<#= typeName #>>(0), GetValue<<#= typeName #>>(10));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetweenOrEqualTo_is_called_with_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetweenOrEqualTo(GetValue<<#= typeName #>>(20), GetValue<<#= typeName #>>(30));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetweenOrEqualTo_is_called_with_in_between_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetweenOrEqualTo(GetValue<<#= typeName #>>(5), GetValue<<#= typeName #>>(20));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetweenOrEqualTo_is_called_with_higher_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetweenOrEqualTo(GetValue<<#= typeName #>>(1), GetValue<<#= typeName #>>(9));

         // Assert.
         action.ShouldThrow<ArgumentOutOfRangeException>();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetweenOrEqualTo_is_called_with_min_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetweenOrEqualTo(GetValue<<#= typeName #>>(10), GetValue<<#= typeName #>>(20));

         // Assert.
         action.ShouldNotThrow();
      }

      [TestMethod]
      public void When_<#= typeName #>EnsureArg_IsBetweenOrEqualTo_is_called_with_max_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         Action action = () =>
            Ensure.Arg(value).IsBetweenOrEqualTo(GetValue<<#= typeName #>>(0), GetValue<<#= typeName #>>(10));

         // Assert.
         action.ShouldNotThrow();
      }

<#
      } 
#>  
   }
}
