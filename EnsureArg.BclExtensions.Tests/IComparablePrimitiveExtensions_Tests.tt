<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)EnsureArg.T4Scripts\EnsureArgCommon.t4"#>
namespace EnsureArg.BclExtensions.Tests
{
   using System;
   using EnsureArg.BclExtensions;
   using FluentAssertions;
   using Microsoft.VisualStudio.TestTools.UnitTesting;

   [TestClass]
   public class IComparablePrimitiveExtensions_Tests
   {  
      <#@ include file="$(SolutionDir)EnsureArg.T4Scripts\GetValueMethod.t4"#>
<# 
      foreach (Type type in PrimitiveComparableTypes)
      {
         string typeName = GetTypeName(type);
#>

      [TestMethod]
      public void When_<#= typeName #>IsGreaterThan_is_called_with_a_larger_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsGreaterThan(GetValue<<#= typeName #>>(5));

         // Assert.
         result.Should().BeTrue();
      }

      [TestMethod]
      public void When_<#= typeName #>IsGreaterThan_is_called_with_a_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsGreaterThan(GetValue<<#= typeName #>>(15));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsGreaterThan_is_called_with_a_same_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsGreaterThan(GetValue<<#= typeName #>>(10));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsGreaterThanOrEqualTo_is_called_with_a_larger_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsGreaterThanOrEqualTo(GetValue<<#= typeName #>>(5));

         // Assert.
         result.Should().Be(true);
      }

      [TestMethod]
      public void When_<#= typeName #>IsGreaterThanOrEqualTo_is_called_with_a_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsGreaterThanOrEqualTo(GetValue<<#= typeName #>>(15));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsGreaterThanOrEqualTo_is_called_with_a_same_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsGreaterThanOrEqualTo(GetValue<<#= typeName #>>(10));

         // Assert.
         result.Should().Be(true);
      }

      [TestMethod]
      public void When_<#= typeName #>IsLessThan_is_called_with_a_larger_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsLessThan(GetValue<<#= typeName #>>(5));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsLessThan_is_called_with_a_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsLessThan(GetValue<<#= typeName #>>(15));

         // Assert.
         result.Should().Be(true);
      }

      [TestMethod]
      public void When_<#= typeName #>IsLessThan_is_called_with_a_same_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsLessThan(GetValue<<#= typeName #>>(10));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsLessThanOrEqualTo_is_called_with_a_larger_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsLessThanOrEqualTo(GetValue<<#= typeName #>>(5));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsLessThanOrEqualTo_is_called_with_a_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsLessThanOrEqualTo(GetValue<<#= typeName #>>(15));

         // Assert.
         result.Should().Be(true);
      }

      [TestMethod]
      public void When_<#= typeName #>IsLessThanOrEqualTo_is_called_with_a_same_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsLessThanOrEqualTo(GetValue<<#= typeName #>>(10));

         // Assert.
         result.Should().Be(true);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetween_is_called_with_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetween(GetValue<<#= typeName #>>(20), GetValue<<#= typeName #>>(30));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetween_is_called_with_in_between_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetween(GetValue<<#= typeName #>>(5), GetValue<<#= typeName #>>(20));

         // Assert.
         result.Should().Be(true);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetween_is_called_with_higher_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetween(GetValue<<#= typeName #>>(1), GetValue<<#= typeName #>>(9));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetween_is_called_with_min_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetween(GetValue<<#= typeName #>>(10), GetValue<<#= typeName #>>(20));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetween_is_called_with_max_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetween(GetValue<<#= typeName #>>(0), GetValue<<#= typeName #>>(10));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetweenOrEqualTo_is_called_with_lower_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetweenOrEqualTo(GetValue<<#= typeName #>>(20), GetValue<<#= typeName #>>(30));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetweenOrEqualTo_is_called_with_in_between_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetweenOrEqualTo(GetValue<<#= typeName #>>(5), GetValue<<#= typeName #>>(20));

         // Assert.
         result.Should().Be(true);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetweenOrEqualTo_is_called_with_higher_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetweenOrEqualTo(GetValue<<#= typeName #>>(1), GetValue<<#= typeName #>>(9));

         // Assert.
         result.Should().Be(false);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetweenOrEqualTo_is_called_with_min_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetweenOrEqualTo(GetValue<<#= typeName #>>(10), GetValue<<#= typeName #>>(20));

         // Assert.
         result.Should().Be(true);
      }

      [TestMethod]
      public void When_<#= typeName #>IsBetweenOrEqualTo_is_called_with_max_value()
      {
         // Arrange.
         <#= typeName #> value = GetValue<<#= typeName #>>(10);

         // Act.
         bool result = value.IsBetweenOrEqualTo(GetValue<<#= typeName #>>(0), GetValue<<#= typeName #>>(10));

         // Assert.
         result.Should().Be(true);
      }
<#
      } 
#>  
   }
}
