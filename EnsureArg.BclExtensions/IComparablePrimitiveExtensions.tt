<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace EnsureArg.BclExtensions
{
   using System;

   public static class IComparablePrimitiveExtensions
   {  <# 
      var aliases = new Dictionary<Type, Tuple<string, bool>>()
      {
          { typeof(byte),    Tuple.Create("byte", true) },
          { typeof(sbyte),   Tuple.Create("sbyte", false) },
          { typeof(short),   Tuple.Create("short", true) },
          { typeof(ushort),  Tuple.Create("ushort", false) },
          { typeof(int),     Tuple.Create("int", true) },
          { typeof(uint),    Tuple.Create("uint", false) },
          { typeof(long),    Tuple.Create("long", true) },
          { typeof(ulong),   Tuple.Create("ulong", false) },
          { typeof(float),   Tuple.Create("float", true) },
          { typeof(double),  Tuple.Create("double", true) },
          { typeof(decimal), Tuple.Create("decimal", true) },
          { typeof(object),  Tuple.Create("object", true) },
          { typeof(bool),    Tuple.Create("bool", true) },
          { typeof(char),    Tuple.Create("char", true) },
          { typeof(string),  Tuple.Create("string", true) },
          { typeof(void),    Tuple.Create("void", true) }
      };

      Type[] types = new Type[] 
      {
         typeof(byte),
         typeof(sbyte),
         typeof(short),
         typeof(ushort),
         typeof(int),
         typeof(uint),
         typeof(long),
         typeof(ulong),
         typeof(float),
         typeof(double),
         typeof(decimal)
      };

      foreach (Type type in types)
      {

         Tuple<string, bool> typeDetails;
         string alias = type.Name;
         bool clsCompliant = true;
         if (aliases.TryGetValue(type, out typeDetails))
         {
            alias = typeDetails.Item1;
            clsCompliant = typeDetails.Item2;
         }
            
      #>

      #region <#= alias #> Methods

      /// <summary>
      /// Determines whether the value is between the specified min and max values exclusively.
      /// </summary>
      /// <example>
      /// <para><#= alias #> a = 2;</para>
      /// <para>a.IsBetween(1, 3); // returns true.</para>
      /// <para>a.IsBetween(2, 3); // return false.</para>
      /// <para>a.IsBetween(1, 2); // returns false.</para>
      /// <para>a.IsBetweenOrEqualTo(1, 3); // returns true.</para>
      /// <para>a.IsBetweenOrEqualTo(2, 3); // return true.</para>
      /// <para>a.IsBetweenOrEqualTo(1, 2); // returns true.</para>
      /// <para>a.IsBetweenOrEqualTo(3, 4); // returns false.</para>
      /// </example>
      /// <param name="value">The value to test.</param>
      /// <param name="min">The minimum value.</param>
      /// <param name="max">The maximum value.</param>
      /// <returns>True if value was between min and max.</returns>
      [CLSCompliant(<#= clsCompliant.ToString().ToLower() #>)]
      public static bool IsBetween(this <#= alias #> value, <#= alias #> min, <#= alias #> max)
      {
         return value.CompareTo(min) > 0 && value.CompareTo(max) < 0;
      }

      /// <summary>
      /// Determines whether the value is between the specified min and max values inclusively.
      /// </summary>
      /// <example>
      /// <para><#= alias #> a = 2;</para>
      /// <para>a.IsBetween(1, 3); // returns true.</para>
      /// <para>a.IsBetween(2, 3); // return false.</para>
      /// <para>a.IsBetween(1, 2); // returns false.</para>
      /// <para>a.IsBetweenOrEqualTo(1, 3); // returns true.</para>
      /// <para>a.IsBetweenOrEqualTo(2, 3); // return true.</para>
      /// <para>a.IsBetweenOrEqualTo(1, 2); // returns true.</para>
      /// <para>a.IsBetweenOrEqualTo(3, 4); // returns false.</para>
      /// </example>
      /// <param name="value">The value to test.</param>
      /// <param name="min">The minimum value.</param>
      /// <param name="max">The maximum value.</param>
      /// <returns>True if value was between min and max inclusively.</returns>
      [CLSCompliant(<#= clsCompliant.ToString().ToLower() #>)]
      public static bool IsBetweenOrEqualTo(this <#= alias #> value, <#= alias #> min, <#= alias #> max)
      {
         return value.CompareTo(min) >= 0 && value.CompareTo(max) <= 0;
      }

      /// <summary>
      /// Determines whether the value is greater than the specified other value.
      /// </summary>
      /// <param name="value">The value to test.</param>
      /// <param name="other">The value to compare against.</param>
      /// <returns>True if value was greater than other; otherwise false.</returns>
      [CLSCompliant(<#= clsCompliant.ToString().ToLower() #>)]
      public static bool IsGreaterThan(this <#= alias #> value, <#= alias #> other)
      {
         return value.CompareTo(other) > 0;
      }

      /// <summary>
      /// Determines whether the value is greater than or equal to the specified other value.
      /// </summary>      
      /// <param name="value">The value to test.</param>
      /// <param name="other">The value to compare against.</param>
      /// <returns>True if value was greater than or equal to other; otherwise false.</returns>
      [CLSCompliant(<#= clsCompliant.ToString().ToLower() #>)]
      public static bool IsGreaterThanOrEqualTo(this <#= alias #> value, <#= alias #> other)
      {
         return value.CompareTo(other) >= 0;
      }

      /// <summary>
      /// Determines whether the value is less than to the specified other value.
      /// </summary>
      /// <param name="value">The value to test.</param>
      /// <param name="other">The value to compare against.</param>
      /// <returns>True if value was less than to other; otherwise false.</returns>
      [CLSCompliant(<#= clsCompliant.ToString().ToLower() #>)]
      public static bool IsLessThan(this <#= alias #> value, <#= alias #> other)
      {
         return value.CompareTo(other) < 0;
      }

      /// <summary>
      /// Determines whether the value is less than or equal to the specified other value.
      /// </summary>
      /// <param name="value">The value to test.</param>
      /// <param name="other">The value to compare against.</param>
      /// <returns>True if value was less than or equal to other; otherwise false.</returns>
      [CLSCompliant(<#= clsCompliant.ToString().ToLower() #>)]
      public static bool IsLessThanOrEqualTo(this <#= alias #> value, <#= alias #> other)
      {
         return value.CompareTo(other) <= 0;
      }

      #endregion <#= alias #> Methods
      <#

      }
      #>
   }
}
