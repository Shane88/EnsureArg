<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)EnsureArg.T4Scripts\EnsureArgCommon.t4"#>
namespace EnsureArg.BclExtensions
{
   using System;

   /// <summary>
   /// Provides extension methods for <see cref="System.IComparable&lt;T&gt;" /> values.
   /// </summary>
   public static class IComparablePrimitiveExtensions
   {  
      // TODO: DateTime overloads have examples which don't compile.
   <# 

      foreach (Type type in PrimitiveComparableTypes)
      {
         string typeName = GetTypeName(type);
            
      #>

      #region <#= typeName #> Methods

      /// <summary>
      /// Determines whether the value is between the specified min and max values exclusively.
      /// </summary>
      /// <example>
      /// <para><#= typeName #> a = 2;</para>
      /// <para>a.IsBetween(1, 3); // returns true.</para>
      /// <para>a.IsBetween(2, 3); // return false.</para>
      /// <para>a.IsBetween(1, 2); // returns false.</para>
      /// <para>a.IsBetweenOrEqualTo(1, 3); // returns true.</para>
      /// <para>a.IsBetweenOrEqualTo(2, 3); // return true.</para>
      /// <para>a.IsBetweenOrEqualTo(1, 2); // returns true.</para>
      /// <para>a.IsBetweenOrEqualTo(3, 4); // returns false.</para>
      /// </example>
      /// <param name="value">The value to test.</param>
      /// <param name="min">The minimum value.</param>
      /// <param name="max">The maximum value.</param>
      /// <returns>True if value was between min and max.</returns>
      <# WriteClsAttribute(type); #>
      public static bool IsBetween(this <#= typeName #> value, <#= typeName #> min, <#= typeName #> max)
      {
         return value > min && value < max;
      }

      /// <summary>
      /// Determines whether the value is between the specified min and max values inclusively.
      /// </summary>
      /// <example>
      /// <para><#= typeName #> a = 2;</para>
      /// <para>a.IsBetween(1, 3); // returns true.</para>
      /// <para>a.IsBetween(2, 3); // return false.</para>
      /// <para>a.IsBetween(1, 2); // returns false.</para>
      /// <para>a.IsBetweenOrEqualTo(1, 3); // returns true.</para>
      /// <para>a.IsBetweenOrEqualTo(2, 3); // return true.</para>
      /// <para>a.IsBetweenOrEqualTo(1, 2); // returns true.</para>
      /// <para>a.IsBetweenOrEqualTo(3, 4); // returns false.</para>
      /// </example>
      /// <param name="value">The value to test.</param>
      /// <param name="min">The minimum value.</param>
      /// <param name="max">The maximum value.</param>
      /// <returns>True if value was between min and max inclusively.</returns>
      <# WriteClsAttribute(type); #>
      public static bool IsBetweenOrEqualTo(this <#= typeName #> value, <#= typeName #> min, <#= typeName #> max)
      {
         return value >= min && value <= max;
      }

      /// <summary>
      /// Determines whether the value is greater than the specified other value.
      /// </summary>
      /// <param name="value">The value to test.</param>
      /// <param name="other">The value to compare against.</param>
      /// <returns>True if value was greater than other; otherwise false.</returns>
      <# WriteClsAttribute(type); #>
      public static bool IsGreaterThan(this <#= typeName #> value, <#= typeName #> other)
      {
         return value > other;
      }

      /// <summary>
      /// Determines whether the value is greater than or equal to the specified other value.
      /// </summary>      
      /// <param name="value">The value to test.</param>
      /// <param name="other">The value to compare against.</param>
      /// <returns>True if value was greater than or equal to other; otherwise false.</returns>
      <# WriteClsAttribute(type); #>
      public static bool IsGreaterThanOrEqualTo(this <#= typeName #> value, <#= typeName #> other)
      {
         return value >= other;
      }

      /// <summary>
      /// Determines whether the value is less than to the specified other value.
      /// </summary>
      /// <param name="value">The value to test.</param>
      /// <param name="other">The value to compare against.</param>
      /// <returns>True if value was less than to other; otherwise false.</returns>
      <# WriteClsAttribute(type); #>
      public static bool IsLessThan(this <#= typeName #> value, <#= typeName #> other)
      {
         return value < other;
      }

      /// <summary>
      /// Determines whether the value is less than or equal to the specified other value.
      /// </summary>
      /// <param name="value">The value to test.</param>
      /// <param name="other">The value to compare against.</param>
      /// <returns>True if value was less than or equal to other; otherwise false.</returns>
      <# WriteClsAttribute(type); #>
      public static bool IsLessThanOrEqualTo(this <#= typeName #> value, <#= typeName #> other)
      {
         return value <= other;
      }

      #endregion <#= typeName #> Methods
      <#
      }
      #>  
   }
}
